<?xml version="1.0" encoding="utf-8"?>
<answers:RatingBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:answers="components.answers.*"
		 implements="components.IAnswer"
		 initialize="init()">

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.events.DragEvent;
			
			import vo.AnswerVariant;
			import vo.SubQuestion;
			
			private const cellHeight : int = 25;
			private const minCellWidth : int = 17;

			private function get isFilledDest() : Boolean {
				var source : Array = (destList.dataProvider as ArrayList).source;
				var cnt : int = 0;
				for (var i : int = 0; i < source.length; i++)
					if (source[i])
						cnt++;
				
				return cnt >= AnswerVariant.MinAnswers;
			}
			
			private function get breachContinuity() : Boolean {
				var source : Array = (destList.dataProvider as ArrayList).source;
				var isMissed : Boolean;
				for (var i : int = 0; i < source.length; i++)
					if (!source[i])
						isMissed = true;
					else if (isMissed)
						return true;
				
				return false;
			}

			public function get instruction() : String {
				return resourceManager.getString('Main', 'legend_drag', [AnswerVariant.MinAnswers, AnswerVariant.MaxAnswers]);
			}
			
			public function trySaveAnswers() : Boolean {
				if (!isFilledDest) {
					showAlert(resourceManager.getString('Main', 'warning_rank', [AnswerVariant.MinAnswers]));
					return false;
				}
				if (breachContinuity) {
					showAlert(resourceManager.getString('Main', 'warning_drag'));
					return false;
				}
				saveAnswers();
				isSaved = true;
				return true;
			}
			
			private function saveAnswers() : void {
				for (var i : int = 0; i < _variants.length; i++)
					_variants[i].Value = destList.dataProvider.getItemAt(i) ? destList.dataProvider.getItemAt(i).order : "";
			}

			override protected function init():void {
				makeDataProviders();
				destList.height = cellHeight * _maxToRate;
				srcList.height = cellHeight * _subitems.length;
			}

			private function reset():void {
				srcList.dataProvider = new ArrayList(_subitems.toArray());
				destList.dataProvider = new ArrayList(new Array(_maxToRate));
			}

			private function makeDataProviders() : void {
				var srcArray : Array =  [];
				var destArray : Array =  new Array(_maxToRate);
				var indx : int;
				for each (var subitem : SubQuestion in _subitems) {
					indx = getAnswerIndex(subitem.order);
 					if (indx >= 0)
						destArray[indx] = subitem;
					else
						srcArray.push(subitem);
				}
				srcList.dataProvider = new ArrayList(srcArray);
				destList.dataProvider = new ArrayList(destArray);
				cnt.dataProvider = new ArrayList();
				for (var i : int = 1; i <= _maxToRate; i++)
					cnt.dataProvider.addItem(i);
			}

			private function dragDropHandler(event : DragEvent) : void {
				if (!event.dragSource.hasFormat("itemsByIndex") || event.dragInitiator == destList)
					return;
				event.preventDefault();
				var rowHeight : Number = destList.height/_maxToRate;
				var dragIndex : int = event.localY / rowHeight;
				var source : Array = (destList.dataProvider as ArrayList).source;
				if (source[dragIndex])
					srcList.dataProvider.addItem(source[dragIndex]);
				var itemsArray : Vector.<Object> = event.dragSource.dataForFormat("itemsByIndex") as Vector.<Object>;
				var tempItem : SubQuestion  = itemsArray[0] as SubQuestion;
				source[dragIndex] = tempItem;
				destList.dataProvider = new ArrayList(source); 
			}
			
			private function getAnswerIndex(subOrder : int) : int {
				var result : int = -1;
				for (var i : int = 0; i <_variants.length &&  result == -1; i++)
					if (_variants.getItemAt(i).Value == subOrder)
						result = i;
				
				return result;
			}
		]]>
	</fx:Script>
	
	<fx:Binding source="AnswerVariant.MaxAnswers" destination="maxToRate" />
	
	<s:HGroup gap="60">
		<s:List id="srcList" labelField="QuestionText"
				styleName="srcList"
				dragEnabled="true"
				dragMoveEnabled="true"
				itemRenderer="components.renderers.DragListItemRenderer"/>
		
		<s:HGroup>
			<s:List id="cnt" width="{minCellWidth}"
					height="{destList.height}"
					itemRenderer="components.renderers.DragListItemRenderer"/>
			
			<s:List id="destList" labelField="QuestionText"
					styleName="destList"
					minWidth="{srcList.width}"
					dragEnabled="true"
					dragMoveEnabled="true"
					dropEnabled="true"
					dragDrop="dragDropHandler(event)"
					itemRenderer="components.renderers.DragListItemRenderer"/>
		</s:HGroup>
	</s:HGroup>
	
	<s:Button label="{resourceManager.getString('Main','start_again')}"
			  click="reset()"/>
</answers:RatingBase>
