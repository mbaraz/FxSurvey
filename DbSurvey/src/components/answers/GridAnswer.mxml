<?xml version="1.0" encoding="utf-8"?>
<answers:AnswerBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:answers="components.answers.*"
				implements="components.IAnswer"
				width="100%"
				creationComplete="init()">
	
	<fx:Script>
		<![CDATA[
			import components.renderers.controls.GridSlider;
			import components.renderers.controls.RadioButtons;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.containers.GridItem;
			import mx.containers.GridRow;
			import mx.controls.Text;
			import mx.core.ScrollPolicy;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			
			import vo.AnswerVariant;
			import vo.SubQuestion;
	
			private const rowPercentWidth : int = 99;
			
			private var topCellPercentWidth : Number;
			private var leftCellPercentWidth : Number;
				
			private var columnsHeaders : ArrayCollection = new ArrayCollection();
			private var resultIndexes : Array = [];

			private function get headerRow() : GridRow {
				var row : GridRow = new GridRow();
				row.styleName = "headerGridRow";
				row.percentWidth = rowPercentWidth;
				var cell : GridItem = new GridItem();
				cell.styleName = "emptyGridItem";
				row.addChild(cell);
				for (var i : int = 0; i < columnsHeaders.length; i++)
					row.addElement(makeHeaderCell(columnsHeaders[i]));
				
				return row;
			}

			public function get instruction() : String {
				return AnswerVariant.Type.name == "RadioGrid" ? resourceManager.getString('Main','legend_grid_radio') : resourceManager.getString('Main','legend_grid_slider');
			}
			
			private var _variants : IList;
			
			public function set variants(value : IList) : void {
				if (_variants)
					_variants.removeEventListener(CollectionEvent.COLLECTION_CHANGE, variantsChangeHandler);
				
				_variants = value;
				_variants.addEventListener(CollectionEvent.COLLECTION_CHANGE, variantsChangeHandler);
				fillColumnsHeaders();
			}
			
			private var rowsHeaders : Array;
			
			private var _subitems : IList;
			
			public function set subitems(value : IList) : void {
				if (_subitems)
					_subitems.removeEventListener(CollectionEvent.COLLECTION_CHANGE, subitemsChangeHandler);
				
				_subitems = value;
				_subitems.addEventListener(CollectionEvent.COLLECTION_CHANGE, subitemsChangeHandler);
				fillRowsHeaders();
			}
			
			public function trySaveAnswers() : Boolean {
				for (var i : int = 1; i < answers.numElements; i++) {
					var row : GridRow = answers.getElementAt(i) as GridRow;
					var arr:Array = row.getChildren();
					var cell : GridItem = row.getElementAt(1) as GridItem;
					if (AnswerVariant.Type.name == "RadioGrid") {
						var buttons : RadioButtons = cell.getElementAt(0) as RadioButtons;
						var selectedValue : Object = buttons.rankGroup.selectedValue;
						if (selectedValue)
							resultIndexes[i - 1] = columnsHeaders.getItemIndex(selectedValue); // Здесь сохраняем лэйбл;
						else {
							showAlert(resourceManager.getString('Main','warning_grid'));
							return false;
						}
					} else {
						var slider : GridSlider = cell.getElementAt(0) as GridSlider;
						resultIndexes[i - 1] = slider.value;  // А здесь сохраняем значение;
					}
				}
				saveAnswers();
				return true;
			}
			
			private function saveAnswers() : void {
				var values : Array = [];
				for (var i : int = 0; i < resultIndexes.length; i++) {
					var indx : int = resultIndexes[i];
					if (!values[indx])
						values[indx] = "";
					values[indx] += _subitems[i].order + AnswerVariant.VARIANTS_DELIMITER;
				}
				for each(var variant : AnswerVariant in _variants)
					variant.Value = "";
					
				for (var j : int = 0; j < values.length; j++) {
					var value : String = values[j];
					(_variants.getItemAt(j) as AnswerVariant).Value = value ? value.substr(0, value.length - 1) : "";
				}
			}

			private function init() : void {
				answers.removeAllElements();
				answers.addElement(headerRow);
				for (var i : int = 0; i < rowsHeaders.length; i++)
					addRow(i);
			}
			
			private function makeHeaderCell(text : String, isTop : Boolean = true) : GridItem {
				var cell : GridItem = new GridItem();
				cell.styleName = "headerGridItem";
				topCellPercentWidth = 100 / (_variants.length + 2);
				leftCellPercentWidth = 2 * topCellPercentWidth;
				cell.percentWidth = isTop ? topCellPercentWidth : leftCellPercentWidth;
				var lbl : Text = new Text();
				lbl.styleName = isTop ? "headerGridLabel" : "leftColumnGridLabel";
				lbl.percentWidth = 100;
				lbl.text = text;
				cell.addElement(lbl);
				return cell;
			}
			
			private function addRow(rowNumber : int) : void {
				var row : GridRow = new GridRow();
				row.percentWidth = rowPercentWidth;
				row.horizontalScrollPolicy = ScrollPolicy.OFF;
				row.styleName = rowNumber % 2 ? "evenGridRow" : "oddGridRow";
				row.addChild(makeHeaderCell(rowsHeaders[rowNumber], false));
				if (_variants.length)
					row.addChild(makeRankCell(rowNumber));
				
				answers.addElement(row);
			}
			
			private function makeRankCell(rowNumber : int) : GridItem {
				var cell : GridItem = new GridItem();
				cell.colSpan = columnsHeaders.length;
				cell.addElement(AnswerVariant.Type.name == "RadioGrid" ? makeRadioButtons(rowNumber) : makeSlider(rowNumber));
				return cell;
			}

			private function makeSlider(rowNumber : int) : GridSlider {
				var slider : GridSlider = new GridSlider();
				slider.labels = columnsHeaders;
				slider.buttonWidth = width * topCellPercentWidth * rowPercentWidth / (100 * 100);
				if (resultIndexes[rowNumber] != null)
					slider.value = resultIndexes[rowNumber];
				return slider;
			}
			
			private function makeRadioButtons(rowNumber : int) : RadioButtons {
				var radioButtons : RadioButtons = new RadioButtons();
				radioButtons.isInGrid = true;
				radioButtons.gap = width * topCellPercentWidth * rowPercentWidth / (100 * 100);
				radioButtons.dataProvider = columnsHeaders;
				if (resultIndexes[rowNumber] != null)
					radioButtons.rankGroup.selectedValue =  columnsHeaders.getItemAt(resultIndexes[rowNumber]);
				return radioButtons;
			}
			
			private function fillColumnsHeaders() : void {
				columnsHeaders.removeAll();
				for (var i : int = 0; i < _variants.length; i++) {
					var answer : AnswerVariant = _variants.getItemAt(i) as AnswerVariant;
					columnsHeaders.addItem(answer.AnswerText);
					if (!answer.Value)
						continue;
					
					var answerValue : String = answer.Value;
/* ??? 					for (var k : int = 0; k < _subitems.length ; k++)
						answerValue = answerValue.replace(_subitems.getItemAt(k).order, k);	// replace портит двузначные order
*/
					var values : Array = answerValue.split(AnswerVariant.VARIANTS_DELIMITER);
					for (var j : int = 0; j < values.length; j++)
						resultIndexes[values[j] - 1] = i;
				}
			}

			private function fillRowsHeaders() : void {
				rowsHeaders = [];
				for each (var item : SubQuestion in _subitems)
				rowsHeaders.push(item.QuestionText);
			}
			
			private function subitemsChangeHandler(event : CollectionEvent) : void {
				fillRowsHeaders();
				init();
			}
			
			private function variantsChangeHandler(event : CollectionEvent) : void {
			// Надо для корректного возврата к предыдущему
				if (event.kind ==  CollectionEventKind.UPDATE && event.items[0].property == "Value")
					return;

				fillColumnsHeaders();
				init();
			}
		]]>
	</fx:Script>
	
	<mx:Grid id="answers" width="100%" />
</answers:AnswerBase>
